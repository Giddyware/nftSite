@tailwind base;
@tailwind components;
@tailwind utilities;

@tailwind base;
/*============================
      CUSTOM RESETS
  ============================
*/
@layer base {
  :root {
    scroll-padding-top: 2rem;
  }

  html {
    box-sizing: border-box;
    font-size: 50%;
    text-rendering: optimizeSpeed;
    text-size-adjust: none;
  }

  @media (min-width: 48em) {
    html {
      font-size: 56.25%;
    }
  }

  @media (min-width: 75em) {
    html {
      font-size: 62.5%;
    }
  }
  @media (min-width: 112.5em) {
    html {
      font-size: 75%;
    }
  }

  *,
  *::before,
  *::after {
    margin: 0;
    padding: 0;
    font: inherit;
    box-sizing: inherit;
  }

  :where([hidden]:not([hidden="until-found"])) {
    display: none !important;
  }

  /* Set core body defaults */
  :where(body) {
    /* Changed to min- to prevent cropping */
    min-height: 100vh;
    /* min-block-size: 100vh; */

    line-height: 1.5;
    text-rendering: optimizeSpeed;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;

    position: relative;
  }

  :where(h1, h2, h3) {
    line-height: calc(1em + 0.5rem);
  }
  :where(p, h1, h2, h3, h4, h5, h6) {
    overflow-wrap: break-word;
  }

  :where(hr) {
    border: none;
    border-block-start: 1px solid;
    color: inherit;
    block-size: 0;
    overflow: visible;
  }

  :where(input, button, textarea, select) {
    font: inherit;
    color: inherit;
  }
  :where(button, label, select, summary, [role="button"], [role="option"]) {
    cursor: pointer;
  }
  :where(textarea) {
    resize: vertical;
    resize: block;
  }
  :where(:disabled) {
    cursor: not-allowed;
  }
  :where(label:has(* > input:disabled), label:has(* + input:disabled)) {
    cursor: not-allowed;
  }

  :where(img, svg, video, canvas, audio, iframe, embed, object) {
    display: block;
  }
  :where(img, picture, svg) {
    max-inline-size: 100%;
    block-size: auto;
  }
  @media not all and (min-resolution: 0.001dpcm) {
    :where(img[loading="lazy"]) {
      clip-path: inset(0.5px);
    }
  }
  :where(svg) {
    --clr-icon--svg: currentColor;
  }

  /* Anchor elements that don't have a class get default styles */
  :where(a) {
    text-decoration: none;
    text-underline-offset: 0.2ex;
  }
  :where(a:not([class])) {
    text-decoration-skip-ink: auto;
  }

  @media (prefers-reduced-motion: no-preference) {
    :where(html:focus-within) {
      scroll-behavior: smooth;
      /* scroll-behavior: auto; */
    }
  }

  /* Remove all animations, transitions and smooth scroll for people that prefer not to see them */
  @media (prefers-reduced-motion: reduce) {
    html:focus-within {
      scroll-behavior: auto;
    }
    *,
    *::before,
    *::after {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
      scroll-behavior: auto !important;
    }
  }



.modal {
  border: 0;
  max-width: 50rem;
  margin: auto;
  border-radius: 0.5rem;
  box-shadow: 0 0 1em rgb(0 0 0 / 0.3), 0 0 0 100vw rgb(0 0 0 / 0.3);
}
/* .modal */
.modal > * {
  margin-block-end: 0.8rem;
}

.modal-content {
  padding: 1.5em;
}

.modal::backdrop {
  background-color: rgb(0 0 0 / 0.3);
  /* opacity: 0.2; */
}

.modal[open] {
  animation: slide-up 1000ms cubic-bezier(0.4, 0, 0.2, 1) forwards,
    fade-in 500ms cubic-bezier(0.4, 0, 0.2, 1) forwards;
}

.modal--closing {
  animation: fade-out 500ms cubic-bezier(0.4, 0, 0.2, 1) forwards;
}
@keyframes slide-up {
  0% {
    transform: translateY(100%);
  }
  100% {
    transform: translateY(0%);
  }
}
@keyframes fade-in {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}
@keyframes fade-out {
  100% {
    opacity: 0;
  }
  0% {
    opacity: 1;
  }
}
